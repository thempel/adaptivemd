#!/usr/bin/env python

##############################################################################
# adaptiveMD: A Python Framework to Run Adaptive Molecular Dynamics (MD)
#             Simulations on HPC Resources
# Copyright 2017 FU Berlin and the Authors
#
# Authors: Jan-Hendrik Prinz
# Contributors:
#
# `adaptiveMD` is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 2.1
# of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with MDTraj. If not, see <http://www.gnu.org/licenses/>.
##############################################################################

# part of the code below was taken from `openpathsampling` see
# <http://www.openpathsampling.org> or
# <http://github.com/openpathsampling/openpathsampling
# for details and license
from __future__ import print_function

import argparse
import re
import signal

from adaptivemd import Project, Worker
from adaptivemd.mongodb import MongoDBStorage


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Run an AdaptiveMD worker')

    parser.add_argument(
        'project',
        metavar='project_name',
        help='project name the worker should attach to',
        type=str)

    parser.add_argument(
        '-t', '--walltime', dest='walltime',
        type=int, default=0, nargs='?',
        help='minutes until the worker shuts down. If 0 (default) it will run indefinitely')

    parser.add_argument(
        '-d', '--mongodb', dest='mongo_db_path',
        type=str, default='mongodb://ensembletk.imp.fu-berlin.de:27017/adaptivemd', nargs='?',
        help='the mongodb url to the db server')

    parser.add_argument(
        '-g', '--generators', dest='generators',
        type=str, default=None, nargs='?',
        help='a comma separated list of generator names used to dispatch the tasks. '
             'the worker will only respond to tasks from generators whose names match '
             'one of the names in the given list. Example: --generators=openmm will only '
             'run scripts from generators named `openmm`')

    parser.add_argument(
        '-w', '--wrappers', dest='wrappers',
        type=str, default='', nargs='?',
        help='a comma separated list of simple function call to the resource. '
             'This can be used to add e.g. CUDA support for specific workers. '
             'Example: --wrappers=add_path("something"),add_cuda_module()')

    parser.add_argument(
        '-l', '--local',
        dest='local', action='store_true',
        default=False,
        help='if true then the DB is set to the default local port')

    parser.add_argument(
        '-v', '--verbose',
        dest='verbose', action='store_true',
        default=False,
        help='if true then stdout and stderr of subprocesses will be rerouted. '
             'Use for debugging.')

    parser.add_argument(
        '-a', '--allegro',
        dest='allegro', action='store_true',
        default=False,
        help='if true then the DB is set to the default allegro setting')

    parser.add_argument(
        '--sheep',
        dest='sheep', action='store_true',
        default=False,
        help='if true then the DB is set to the default sheep setting')

    parser.add_argument(
        '-s', '--sleep', dest='sleep',
        type=int, default=2, nargs='?',
        help='polling interval for new jobs in seconds. Default is 2 seconds. Increase '
             'to get less traffic on the DB')

    # parser.add_argument(
    #     '-p', '--prefetch', dest='prefetch',
    #     type=int, default=2, nargs='?',
    #     help='number of tasks to prefetch. Once the queue is empty, the worker will '
    #          'queue up to this number of tasks and reserve it for execution.')

    parser.add_argument(
        '--heartbeat', dest='heartbeat',
        type=int, default=10, nargs='?',
        help='heartbeat interval in seconds. Default is 10 seconds.')

    args = parser.parse_args()

    if args.allegro:
        db_path = "mongodb://ensembletk.imp.fu-berlin.de:27017/"
    elif args.sheep:
        db_path = "mongodb://sheep:27017/"
    elif args.local:
        db_path = "mongodb://localhost:27017/"
    else:
        db_path = args.mongo_db_path

    MongoDBStorage._db_url = db_path

    project = Project(args.project)

    RE_wrapper = re.compile(
        r'''([a-zA-Z][a-zA-Z_0-9]*)\((\"[^\"]*?\"|'[^']*?'|[\s0-9.]+)?(?:,\s*(\"[^\"]*?\"|'[^']*?'|[0-9.]+)\s*)?\)''')

    # --------------------------------------------------------------------------
    # CREATE THE WORKER
    #   the instance that knows about the current state
    # --------------------------------------------------------------------------

    if args.generators:
        generators = [x.strip() for x in args.generators.split(',')]
    else:
        generators = None

    worker = Worker(
        walltime=args.walltime * 60,  # walltime in minutes
        generators=generators,
        sleep=args.sleep,
        heartbeat=args.heartbeat,
        verbose=args.verbose
    )

    project.workers.add(worker)
    worker.create(project)

    if args.wrappers:

        wrapper = worker.scheduler.wrapper

        for cmd in RE_wrapper.findall(args.wrappers):
            ex = cmd[0]
            ar = []
            for x in cmd[1:]:
                if len(x) > 0:
                    if '"' in x or "'" in x:
                        q = str(x[1:-1])
                    elif '.' in x:
                        q = float(x)
                    else:
                        q = int(x)
                    ar.append(q)

            if hasattr(wrapper, ex):
                fn = getattr(wrapper, ex)
                fn(*ar)

        print('Using general wrapper:')
        print(wrapper.description)

    print('Worker running @ %s' % db_path)

    if args.generators:
        print('[limited to generators `%s`]' % ', '.join(worker.generators))

    print()

    def signal_term_handler(sig, frame):
        print('got SIGTERM ...')
        worker.shutdown()

    signal.signal(signal.SIGTERM, signal_term_handler)

    print('start listening ...')

    worker.run()

    print('good-bye')

    exit()
